---
- name: Add Jenkins repository
  yum_repository:
    name: jenkins
    description: Jenkins YUM repo
    baseurl: https://pkg.jenkins.io/redhat-stable
    gpgkey: https://pkg.jenkins.io/redhat-stable/jenkins.io.key

- name: Install epel via amazon-linux-extras packages
  shell: "amazon-linux-extras install epel -y"

- name: Install Java 11 via amazon-linux-extras packages
  shell: "amazon-linux-extras install java-openjdk11 -y"

- name: Install Git
  yum:
    name: git
    state: present
    update_cache: true

- name: Install python-jenkins
  yum:
    name: python-jenkins
    state: present
    update_cache: true

- name: Install Jenkins
  yum:
    name: jenkins
    state: present
    update_cache: true

# Configure Jenkins init settings.
- name: Modify variables in init file
  lineinfile:
    dest: "{{ jenkins_init_file }}"
    insertafter: '^{{ item.option }}='
    regexp: '^{{ item.option }}=\"\${{ item.option }} '
    line: '{{ item.option }}="${{ item.option }} {{ item.value }}"'
    state: present
    mode: 0644
  with_items: "{{ jenkins_init_changes }}"

- name: Create custom init scripts directory
  file:
    path: "{{ jenkins_home }}/init.groovy.d"
    state: directory
    owner: "{{ jenkins_process_user }}"
    group: "{{ jenkins_process_group }}"
    mode: 0775

- name: Configure default users
  template:
    src: basic-security.groovy.j2
    dest: "{{ jenkins_home }}/init.groovy.d/basic-security.groovy"
    owner: "{{ jenkins_process_user }}"
    group: "{{ jenkins_process_group }}"
    mode: 0775

- name: Enable and Start the Jenkins Service
  service:
    name: jenkins
    state: started
    enabled: yes

- name: Wait for Jenkins - CLI Endpoint - to start up before proceeding
  uri:
    url: "http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/cli/"
    method: GET
    return_content: "yes"
    timeout: 5
    body_format: raw
    follow_redirects: "no"
    status_code: 200,403
  register: result
  until: (result.status == 403 or result.status == 200) and (result.content.find("Please wait while") == -1)
  retries: "{{ jenkins_connection_retries }}"
  delay: "{{ jenkins_connection_delay }}"
  changed_when: false
  check_mode: false

# - name: Get the jenkins-cli jarfile from the Jenkins server
#   get_url:
#     url: "http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/jnlpJars/jenkins-cli.jar"
#     dest: "{{ jenkins_jar_location }}"
#   register: jarfile_get
#   until: "'OK' in jarfile_get.msg or '304' in jarfile_get.msg or 'file already exists' in jarfile_get.msg"
#   retries: 5
#   delay: 10
#   check_mode: false

# PLUGINS
# jenkins_plugin module doesn't support password files.
- name: Get Jenkins admin password from file.
  slurp:
    src: "{{ jenkins_admin_password_file }}"
  register: adminpasswordfile
  no_log: true
  when: jenkins_admin_password_file | default(false)

- name: Set Jenkins admin password fact.
  set_fact:
    jenkins_admin_password: "{{ adminpasswordfile['stdout'] | default(jenkins_admin_password) }}"
  no_log: true

# Update Jenkins so that plugin updates don't fail.
- name: Create Jenkins updates directory.
  file:
    path: "{{ jenkins_home }}/updates"
    state: directory
    owner: jenkins
    group: jenkins
    mode: 0755

- name: Download current plugin updates from Jenkins update site.
  get_url:
    url: "{{ jenkins_updates_url }}/update-center.json"
    dest: "{{ jenkins_home }}/updates/default.json"
    owner: jenkins
    group: jenkins
    mode: 0440
  changed_when: false
  register: get_result
  until: get_result is success
  retries: 3
  delay: 2

- name: Remove first and last line from json file.
  replace: 
    path: "{{ jenkins_home }}/updates/default.json"
    regexp: "1d;$d"

- name: Install Jenkins plugins using password.
  jenkins_plugin:
    name: "{{ item.name | default(item) }}"
    # version: "{{ item.version | default(omit) }}" need to be commented out to install plugin dependencies
    jenkins_home: "{{ jenkins_home }}"
    url_username: "{{ jenkins_admin_username }}"
    url_password: "{{ jenkins_admin_password }}"
    state: "{{ 'present' if item.version is defined else jenkins_plugins_state }}"
    timeout: "{{ jenkins_plugin_timeout }}"
    updates_expiration: "{{ jenkins_plugin_updates_expiration }}"
    updates_url: "{{ jenkins_updates_url }}"
    url: "http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}"
    with_dependencies: "{{ jenkins_plugins_install_dependencies }}"
  with_items: "{{ jenkins_plugins }}"
  when: jenkins_admin_password | default(false)
  register: plugin_result
  until: plugin_result is success
  retries: 3
  delay: 2

- name: Restart Jenkins
  service:
    name: jenkins
    state: restarted

- name: Wait for Jenkins - CreateCredentials Endpoint - to start up before proceeding
  uri:
    url: "http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/credentials/store/system/domain/_/createCredentials"
    method: GET
    timeout: 5
    body_format: raw
    follow_redirects: "no"
    status_code: 405
  register: result
  until: (result.status == 405)
  retries: "{{ jenkins_connection_retries }}"
  delay: "{{ jenkins_connection_delay }}"
  changed_when: false
  check_mode: false

- name: Create AWS Credentials
  uri:
    method: POST
    url: "http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/credentials/store/system/domain/_/createCredentials"
    user: "{{ jenkins_admin_username }}"
    password: "{{ jenkins_admin_password }}"
    status_code: [302]
    force_basic_auth: yes
    body: |
      json={
        "": "0",
        "credentials": {
          "scope": "GLOBAL",
          "id": "devops_jenkins",
          "accessKey": "{{ jenkins_user_aws_access_key_id }}",
          "secretKey": "{{ jenkins_user_aws_secret_access_key|urlencode }}",
          "$class": "com.cloudbees.jenkins.plugins.awscredentials.AWSCredentialsImpl"
        }
      }  
  when: jenkins_admin_password | default(false)

- name: Create Jenkins Job
  jenkins_job:
    config: "{{ lookup('file', 'templates/config.xml.j2') }}"
    name: "{{ jenkins_job_name }}"
    user: "{{ jenkins_admin_username }}"
    password: "{{ jenkins_admin_password }}"
    url: "http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}"
  when: jenkins_admin_password | default(false)
